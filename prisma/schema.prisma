generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @db.ObjectId
  employee           Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId         String   @db.ObjectId
  @@unique([provider, providerAccountId])
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  surname           String
  company           Company?
  companyId         String?
  email             String      @unique
  emailVerified     DateTime?
  hashedPassword    String
  image             String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  accounts          Account[]
}

model Company {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  locations   Location[]    
  departments Department[]  
  settlements Settlement[]  
  employees   Employee[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique @db.ObjectId
}

model Location {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String     @db.ObjectId
  employees   Employee[]
  @@unique([companyId, name])
}

model Department {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String     @db.ObjectId
  employees   Employee[]  
  @@unique([companyId, name])
}

model Employee {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  surname         String
  email           String        @unique
  emailVerified   DateTime?
  hashedPassword  String
  image           String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  accounts        Account[]     
  location        Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId      String?       @db.ObjectId
  department      Department?   @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId    String?       @db.ObjectId
  settlements     Settlement[] 
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String        @db.ObjectId
  @@unique([companyId, name, surname])
}

model Settlement {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt 
  location    String    
  employee    Employee?  @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId  String?    @db.ObjectId
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String     @db.ObjectId
}
